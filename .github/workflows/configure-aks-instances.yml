name: Configure AKS instances
on:
  workflow_dispatch:
    inputs:
        environment:
            type: choice
            description: Environment
            options:
            - test
        terraform_version: 
            description: 'Terraform Version'
            required: true
            default: 1.3.7

env:
  WORKING-DIRECTORY: .
  DEPLOYMENT-DIRECTORY: ./deployments/kv-secrets-provider
  TEMPLATES-DIRECTORY: ./templates/kv-secrets-provider
  PYTHON-SCRIPT-PATH: ./scripts/aks-kv-integration-output-formatter.py

jobs:
    get-terraform-output:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}
        permissions:
            id-token: write
            contents: read
            pages: write
        defaults:
            run:
                shell: bash
                working-directory: ${{ env.WORKING-DIRECTORY }}

        steps:
        - uses: actions/checkout@v3

        - name: Az CLI login
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: ${{ inputs.terraform_version }}
            terraform_wrapper: false

        - name: Terraform Init
          id: init
          run: |
            cd ${{ env.DEPLOYMENT-DIRECTORY }}
            terraform init \
              -backend-config=resource_group_name=${{ vars.AZURERM_RESOURCE_GROUP_NAME }} \
              -backend-config=storage_account_name=${{ vars.AZURERM_STORAGE_ACCOUNT_NAME }} \
              -backend-config=container_name=${{ vars.AZURERM_CONTAINER_NAME }} \
              -backend-config=key=${{ vars.AZURERM_KEY }}
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true
        
        - name: Terraform Output
          id: output
          run: |
            cd ${{ env.DEPLOYMENT-DIRECTORY }}
            terraform output -json > tf.output.json
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true
        
        - name: Upload tf.output.json artifact
          uses: actions/upload-artifact@v3
          with:
            name: tf.output
            path: ${{ env.DEPLOYMENT-DIRECTORY }}/tf.output.json

    configure-aks-instances:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}
        needs: get-terraform-output
        permissions:
            id-token: write
            contents: read
            pages: write
        defaults:
          run:
            shell: bash
            working-directory: ${{ env.WORKING-DIRECTORY }}
    
        steps:
        - uses: actions/checkout@v3
            
        - name: Download tfplan artifact
          uses: actions/download-artifact@v3
          with:
            name: tf.output
            path: ${{ env.WORKING-DIRECTORY }}
    
        - name: Az CLI login
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - uses: azure/setup-kubectl@v3
          with:
            version: 'v1.28.3'

        - uses: actions/setup-python@v4
          with:
            python-version: '3.10' 

        - name: Install Python azure-cli
          run: |
            pip install azure-cli

        - name: Run Python script
          run: |
            py ${{ env.PYTHON-SCRIPT-PATH }} tf.output.json ${{ env.TEMPLATES-DIRECTORY }} ${{ secrets.AZURE_TENANT_ID }}
